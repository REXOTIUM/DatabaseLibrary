package info.peperkoek.databaselibrary;

import info.peperkoek.databaselibrary.core.KeyValue;
import info.peperkoek.databaselibrary.core.Query;
import info.peperkoek.databaselibrary.exceptions.DatabaseException;
import info.peperkoek.databaselibrary.interfaces.DataAccessObject;
import info.peperkoek.databaselibrary.utils.DBUtils;
import java.util.Collection;
import java.util.List;

/**
 *
 * @author Rick Pijnenburg - REXOTIUM
 * @email m.a.a.pijnenburg@gmail.com
 */
public class MSSQLDataAccessObject implements DataAccessObject {
    private final String connectionString;
    
    /**
     * 
     * @param connectionString 
     */
    public MSSQLDataAccessObject(String connectionString) {
        this.connectionString = connectionString;
    }

    @Override
    public <T> T getObject(T item) throws DatabaseException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T> T getObject(Class<T> clazz, Query query) throws DatabaseException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T> Collection<T> getObjects(Class<T> clazz) throws DatabaseException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T> Collection<T> getObjects(Class<T> clazz, Query query) throws DatabaseException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T> boolean insertObject(T obj) throws DatabaseException {
        boolean pkAutoGen = DBUtils.IsPKAutoGenerated(obj);
        String table = DBUtils.getTableName(obj.getClass());
        List<KeyValue> kvs = DBUtils.getFields(obj, pkAutoGen);
        StringBuilder columns = new StringBuilder();
        StringBuilder values = new StringBuilder();
        for (KeyValue kv : kvs) {
            if (kv.getKey() == null || EMPTY.equals(kv.getValue())) {
                continue;
            }
            columns.append(kv.getKey());
            columns.append(COMMA);
            values.append(kv.getValue());
            values.append(COMMA);
        }
        columns.delete(columns.length() - 2, columns.length()); //remove excess comma
        values.delete(values.length() - 2, values.length()); //remove excess comma
        if(pkAutoGen) {
            String sql = String.format(INSERT_ITEM_OUTPUT, table, columns.toString(), DBUtils.getPrimaryKey(obj), values.toString());
            if(!DBUtils.hasLinkTable(obj.getClass()))
                return insertQuery(sql);
            return insertQuery(sql) && insertLinkTable(obj);
        } else {
            String sql = String.format(INSERT_ITEM, table, columns.toString(), values.toString());
            if(!DBUtils.hasLinkTable(obj.getClass()))
                return nonQuery(sql);
            return nonQuery(sql) && insertLinkTable(obj);
        }
    }

    @Override
    public <T> boolean insertObjects(T[] obj) throws DatabaseException {
        for(T item : obj) {
            if(!insertObject(item))
                return false;
        }
        return true;
    }

    @Override
    public <T> boolean insertObjects(Collection<T> obj) throws DatabaseException {
        for(T item : obj) {
            if(!insertObject(item))
                return false;
        }
        return true;
    }

    @Override
    public <T> boolean updateObject(T obj) throws DatabaseException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T> boolean updateObjects(T[] obj) throws DatabaseException {
        for(T item : obj) {
            if(!updateObject(item))
                return false;
        }
        return true;
    }

    @Override
    public <T> boolean updateObjects(Collection<T> obj) throws DatabaseException {
        for(T item : obj) {
            if(!updateObject(item))
                return false;
        }
        return true;
    }

    @Override
    public <T> boolean removeObject(T obj) throws DatabaseException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T> boolean removeObjects(T[] obj) throws DatabaseException {
        for(T item : obj) {
            if(!removeObject(item))
                return false;
        }
        return true;
    }

    @Override
    public <T> boolean removeObjects(Collection<T> obj) throws DatabaseException {
        for(T item : obj) {
            if(!removeObject(item))
                return false;
        }
        return true;
    }
}